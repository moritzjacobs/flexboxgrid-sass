/**
 * Opinions
 */

*,
*:before,
*:after {
	box-sizing: border-box;
}

/**
 * Defaults
 */

$mj-grid-columns: 12 !default;
$mj-gutter-width: 1rem !default;
$mj-outer-margin: 1rem !default;
$mj-max-width: 1440px !default;
$mj-breakpoints: (
		xs: 320px,
		sm: 480px,
		md: 768px,
		lg: 1024px,
		xl: 1200px,
		xxl: 1440px
	)
	!default;

/**
 * Mixins
 */

@mixin at($size) {
	@media only screen and (min-width: $size) {
		@content;
	}
}
@mixin until($size) {
	@media only screen and (max-width: $size - 1px) {
		@content;
	}
}

/***********************************
 *********************************** 
 **  Editing probably ends hereâ€¦  **
 *********************************** 
 ***********************************/

/**
 * classes
 */

@mixin mj-sass-col-common($padding) {
	box-sizing: border-box;

	// split @include flex(0, 0, auto) into individual props
	flex-grow: 0;
	flex-shrink: 0;

	// we leave flex-basis(auto) out of common because
	// in some spots we need it and some we dont
	// more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

	padding-right: $padding;
	padding-left: $padding;
}

@mixin mj-sass-col($name, $half-gutter-width) {
	.col-#{$name} {
		@include mj-sass-col-common($half-gutter-width);
		flex-basis: auto;
	}
	@for $i from 0 through $mj-grid-columns {
		.col-#{$name}-#{$i} {
			@include mj-sass-col-common($half-gutter-width);
			flex-basis: 100% / $mj-grid-columns * $i;
			max-width: 100% / $mj-grid-columns * $i;
		}
	}
	@for $i from 0 through $mj-grid-columns {
		.col-#{$name}-offset-#{$i} {
			@include mj-sass-col-common($half-gutter-width);
			margin-left: 100% / $mj-grid-columns * $i;
		}
	}
	.col-#{$name} {
		flex-grow: 1;
		flex-basis: 0;
		max-width: 100%;
	}
	.start-#{$name} {
		justify-content: flex-start;
		text-align: start;
	}

	.center-#{$name} {
		justify-content: center;
		text-align: center;
	}

	.end-#{$name} {
		justify-content: flex-end;
		text-align: end;
	}

	.top-#{$name} {
		align-items: flex-start;
	}

	.middle-#{$name} {
		align-items: center;
	}

	.bottom-#{$name} {
		align-items: flex-end;
	}

	.around-#{$name} {
		justify-content: space-around;
	}

	.between-#{$name} {
		justify-content: space-between;
	}

	.first-#{$name} {
		order: -1;
	}

	.last-#{$name} {
		order: 1;
	}
}

@mixin mj-flexboxgird-init {
	$gutter-compensation: $mj-gutter-width * 0.5 * -1;
	$first-breakpoint: nth($mj-breakpoints, 1);
	$breakpoints-tail: map-remove($mj-breakpoints, nth($first-breakpoint, 1));

	.container {
		margin-right: auto;
		margin-left: auto;
		padding-right: $mj-outer-margin;
		padding-left: $mj-outer-margin;
		max-width: $mj-max-width;
	}

	.container-full {
		width: 100%;
		padding-right: $mj-outer-margin;
		padding-left: $mj-outer-margin;
	}

	.row {
		box-sizing: border-box;
		display: flex;
		flex: 0 1 auto;
		flex-direction: row;
		flex-wrap: wrap;
		margin-right: $gutter-compensation;
		margin-left: $gutter-compensation;
		&.reverse {
			flex-direction: row-reverse;
		}
	}

	.col {
		&.reverse {
			flex-direction: column-reverse;
		}
	}

	@include mj-sass-col(nth($first-breakpoint, 1), $mj-gutter-width / 2);
	@each $breakpoint in $breakpoints-tail {
		$name: nth($breakpoint, 1);
		$size: nth($breakpoint, 2);
		@include at($size) {
			@include mj-sass-col($name, $mj-gutter-width / 2);
		}
	}
}

@include mj-flexboxgird-init;
